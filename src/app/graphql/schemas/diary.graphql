# 日记
extend type Query {
  # 查询列表
  diaries(
    orderBy: OrderBy
    search: DiarySearch
    pagination: Pagination
  ): Diaries @auth

  # 统计账单
  statsBill(
    search: StatsBillSearch
  ): StatsBill @auth
}

extend type Mutation {
  createDiaries(
    body: [DiaryFields!]!
    orderBy: OrderBy
    search: DiarySearch
    pagination: Pagination
  ): Diaries @auth

  removeDiaries (
    conds: DiarySearch!
    orderBy: OrderBy
    search: DiarySearch
    pagination: Pagination
  ): Diaries @auth

  updateDiaries (
    conds: DiarySearch!
    body: DiaryFields!
    orderBy: OrderBy
    search: DiarySearch
    pagination: Pagination
  ): Diaries @auth
}

type Diet {
  desc: String
  type: Datasetsfrom @translate(code: "2")
}

type Fitness {
  type: Datasetsfrom @translate(code: "4")
  place: Datasetsfrom @translate(code: "3")
}

type Bill {
  desc: String
  income: Float
  expend: Float
  tag: Datasetsfrom @translate(code: "1")
}

type BodyIndex {
  bim: Float
  weight: Float
  muscle: Float
  bodyfat: Float
  moistureContent: Float
}

type Diary {
  name: String
  getUp: Date
  toRest: Date
  bodyIndex: BodyIndex
  informalEssay: String

  diet: [Diet]
  bill: [Bill]
  fitness: [Fitness]

  id: ID
  status: Int
  creator: User @relation(model: "User")
  updater: User @relation(model: "User")
  updateTime: Date
  creationTime: Date
}

type Diaries {
  list: [Diary]
  change: [Diary]
  message: String
  pagination: Pagination
}

input DiarySearch {
  name: String
  names: [String]

  id: ID
  ids: [ID!]
  startUpdateTime: Date
  endUpdateTime: Date
  startCreationTime: Date
  endCreationTime: Date
  status: [Int]
}

scalar DietInput {
  type: Int
  desc: String
}

scalar FitnessInput {
  type: Int
  place: Int
}

scalar BillInput {
  tag: Int
  desc: String
  income: Float
  expend: Float
}

scalar BodyIndexInput {
  weight: Float
  muscle: Float
  moistureContent: Float
  bodyfat: Float
  bim: Float
}

input DiaryFields {
  diet: DietInput
  bill: BillInput
  status: Int
  getUp: Date
  name: String
  toRest: Date
  fitness: FitnessInput
  informalEssay: String
  bodyIndex: BodyIndexInput
}

# 统计账单 - 列表项
type StatsBillItem {
  name: String
  income: Float
  expend: Float
  diaries: [Diary]
}

# 统计账单 - 响应列表
type StatsBill {
  stats: Bill
  groupWithName: [StatsBillItem]
  message: String
}

# 统计账单 - 统计查询条件
input StatsBillSearch {
  span: String
  name: [String]   # 时间范围, 在这儿时间 == name
}
