extend type Query {
  aiChats(
    orderBy: OrderBy
    search: AiChatSearch
    pagination: Pagination
  ): AiChats
}

extend type Mutation {
  createAiChats(
    body: [AiChatFields!]!
    orderBy: OrderBy
    search: AiChatSearch
    pagination: Pagination
  ): AiChats @auth

  removeAiChats (
    conds: AiChatSearch!
    orderBy: OrderBy
    search: AiChatSearch
    pagination: Pagination
  ): AiChats @auth

  updateAiChats (
    conds: AiChatSearch!
    body: AiChatFields!
    orderBy: OrderBy
    search: AiChatSearch
    pagination: Pagination
  ): AiChats @auth
}

type AiChatMessage {
  role: String
  content: String
}

type AiChat {
  name: String
  messages: [AiChatMessage]

  id: ID
  creator: User @relation
  updater: User @relation
  updateTime: Date
  creationTime: Date
}


type AiChats {
  list: [AiChat]
  change: [AiChat]
  message: String
  pagination: Pagination
}

input AiChatSearch {
  id: ID
  ids: [ID!]
  name: String

  creator: ID
  updater: ID
  startUpdateTime: Date
  endUpdateTime: Date
  startCreationTime: Date
  endCreationTime: Date
}

input AiChatFields {
  tags: [Int]
  status: Int
  content: String
}
