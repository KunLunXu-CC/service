# 用户
type Query {
  users(
    orderBy: OrderBy
    search: UserSearch
    pagination: Pagination
  ): Users @auth
}

type Mutation {
  createUsers(
    body: [UserFields!]!
    orderBy: OrderBy
    search: UserSearch
    pagination: Pagination
  ): Users @auth

  removeUsers (
    conds: UserSearch!
    orderBy: OrderBy
    search: UserSearch
    pagination: Pagination
  ): Users @auth

  updateUsers (
    conds: UserSearch!
    body: UserFields!
    orderBy: OrderBy
    search: UserSearch
    pagination: Pagination
  ): Users @auth

  login (
    account: String
    password: String
  ): Login

}

type Login {
  user: User
  message: String
}

type Users {
  list: [User]
  change: [User]
  message: String
  pagination: Pagination
}

type User {
  account: String
  role: Role @relation
  sex: Int

  id: ID
  name: String
  status: Int
  creator: User @relation
  updater: User @relation
  updateTime: Date
  creationTime: Date
}

input UserSearch {
  id: ID
  ids: [ID!]
  name: String
  account: String
  role: ID
  sex: Int

  status: [Int]
  creator: ID
  updater: ID
  startUpdateTime: Date
  endUpdateTime: Date
  startCreationTime: Date
  endCreationTime: Date
}

input UserFields {
  name: String
  account: String
  password: String
  role: ID
  sex: Int
  status: Int
}
