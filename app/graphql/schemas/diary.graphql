extend type Query {
  # 查询列表
  diaries(
    orderBy: OrderBy
    search: DiarySearch
    pagination: Pagination
  ): Diaries @auth

  # 统计账单
  statsBill(
    search: StatsSearch
  ): StatsBill @auth
}

extend type Mutation {
  createDiaries(
    body: [DiaryFields!]!
    orderBy: OrderBy
    search: DiarySearch
    pagination: Pagination
  ): Diaries @auth

  removeDiaries (
    conds: DiarySearch!
    orderBy: OrderBy
    search: DiarySearch
    pagination: Pagination
  ): Diaries @auth

  updateDiaries (
    conds: DiarySearch!
    body: DiaryFields!
    orderBy: OrderBy
    search: DiarySearch
    pagination: Pagination
  ): Diaries @auth
}

type Diary {
  name: String
  getUp: Date
  toRest: Date
  informalEssay: String
  diet: Diet
  bill: Bill
  fitness: Fitness
  bodyIndex: BodyIndex

  id: ID
  status: Int
  creator: User @user(key: "creator")
  updater: User @user(key: "updater")
  updateTime: Date
  creationTime: Date
}

type Diaries {
  list: [Diary]
  change: [Diary]
  message: String
  pagination: Pagination
}

scalar Diet {
  type: Int
  desc: String
}

scalar FitnessProject

scalar Fitness {
  type: Int
  feel: Int
  place: Int
  duration: Int
  project: FitnessProject
}

scalar Bill {
  desc: String
  income: Float
  expend: Float
  balance: Float
}

scalar BodyIndex {
  weight: Float
  muscle: Float
  moistureContent: Float
  bodyfat: Float
  bim: Float
}

input DiarySearch {
  name: String
  names: [String]

  id: ID
  ids: [ID!]
  startUpdateTime: Date
  endUpdateTime: Date
  startCreationTime: Date
  endCreationTime: Date
  status: [Int]
}

input DiaryFields {
  diet: Diet
  bill: Bill
  status: Int
  getUp: Date
  name: String
  toRest: Date
  fitness: Fitness
  bodyIndex: BodyIndex
  informalEssay: String
}

# 统计账单列表项
type StatsBillItem {
  name: String
  income: Float
  expend: Float
  diaries: [Diary]
}

# 统计账单响应列表
type StatsBill {
  groupWithName: [StatsBillItem]
}

# 统计查询条件
input StatsSearch {
  span: String
  name: [String]   # 时间范围, 在这儿时间 == name
}
