extend type Query{
  dictionaries(
    orderBy: OrderBy
    pagination: Pagination
    search: DatasetsfromSearch
  ): Datasetsfroms
}

extend type Mutation{
  removeDictionaries (
    orderBy: OrderBy
    pagination: Pagination
    conds: DatasetsfromSearch!
    search: DatasetsfromSearch
  ): Datasetsfroms @auth

  createDictionaries (
    orderBy: OrderBy
    pagination: Pagination
    search: DatasetsfromSearch
    body: [DatasetsfromFields!]!
  ): Datasetsfroms @auth

  updateDictionaries (
    orderBy: OrderBy
    pagination: Pagination
    body: DatasetsfromFields!
    conds: DatasetsfromSearch!
    search: DatasetsfromSearch
  ): Datasetsfroms @auth
}

input DatasetsfromFields {
  parent: ID
  value: Int
  code: String
  desc: String
  name: String
}

input DatasetsfromSearch {
  parent: ID
  value: Int
  code: String
  desc: String
  name: String]

  id: ID
  ids: [ID!]
  creator: ID
  updater: ID
  status: [Int]
  endUpdateTime: Date
  startUpdateTime: Date
  endCreationTime: Date
  startCreationTime: Date
}

type Datasetsfroms{
  list: [Datasetsfrom]
  change: [Datasetsfrom]
  message: String
  pagination: Pagination
}

type Datasetsfrom {
  value: Int
  code: String
  desc: String
  name: String
  parent: Datasetsfrom

  id: ID
  status: Int
  updateTime: Date
  creationTime: Date
  creator: User @user(key: "creator")
  updater: User @user(key: "updater")
}
