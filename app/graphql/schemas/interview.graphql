extend type Query {
  interviews(
    orderBy: OrderBy
    search: InterviewSearch
    pagination: Pagination
  ): Interviews
}

extend type Mutation {
  createInterviews(
    body: [InterviewFields!]!
    orderBy: OrderBy
    search: InterviewSearch
    pagination: Pagination
  ): Interviews @auth

  removeInterviews (
    conds: InterviewSearch!
    orderBy: OrderBy
    search: InterviewSearch
    pagination: Pagination
  ): Interviews @auth

  updateInterviews (
    conds: InterviewSearch!
    body: InterviewFields!
    orderBy: OrderBy
    search: InterviewSearch
    pagination: Pagination
  ): Interviews @auth
}

type Interviews {
  list: [Interview]
  change: [Interview]
  message: String
  pagination: Pagination
}

type Interview {
  content: String
  tags: [Int]

  id: ID
  status: Int
  creator: User @user(key: "creator")
  updater: User @user(key: "updater")
  updateTime: Date
  creationTime: Date
}

input InterviewSearch {
  id: ID
  ids: [ID!]
  tags: [Int]
  content: String

  status: [Int]
  creator: ID
  updater: ID
  startUpdateTime: Date
  endUpdateTime: Date
  startCreationTime: Date
  endCreationTime: Date
}

input InterviewFields {
  tags: [Int]
  status: Int
  content: String
}
