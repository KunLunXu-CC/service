extend type Query {
  roles(
    orderBy: OrderBy 
    search: RoleSearch
    pagination: Pagination
  ): Roles
}

extend type Mutation {
  removeRoles (
    conds: RoleSearch!
    orderBy: OrderBy
    search: RoleSearch
    pagination: Pagination
  ): Roles

  createRoles (
    body: [RoleFields!]!
    orderBy: OrderBy
    search: RoleSearch
    pagination: Pagination
  ): Roles

  updateRoles (
    conds: RoleSearch!
    body: RoleFields!
    orderBy: OrderBy
    search: RoleSearch
    pagination: Pagination
  ): Roles
}

type Roles {
  list: [Role]
  change: [Role]
  rescode: Int
  message: String
  pagination: Pagination
}

scalar Auth {
  name: String
  code: String
  readable: Int
  writable: Int
}

type Role {
  desc: String
  auth: [Auth]
  
  id: ID
  name: String
  status: Int
  creator: User
  updater: User
  updateTime: Date
  creationTime: Date
}

input RoleSearch {
  id: ID
  ids: [ID!]
  name: String
  desc: String

  status: [Int]
  creator: ID
  updater: ID
  startUpdateTime: Date
  endUpdateTime: Date
  startCreationTime: Date
  endCreationTime: Date
}

input RoleFields {
  name: String
  desc: String
  auth: [Auth]
  status: Int
}
